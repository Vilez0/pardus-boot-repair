#!/usr/bin/env bash
set +e

if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root"
    exit 1
fi

if [[ $(ls /sys/block/* | grep "[0-9]$" | wc -l) -eq 0 ]]; then
    echo "No block devices found"
    exit 1
fi

# check if $DESTDIR is a valid directory
if [[ ! -d $DESTDIR ]]; then
    DESTDIR=$(mktemp -d)
fi

while [[ ! -b /dev/$disk ]]; do
    echo $(ls /sys/block/* | grep "[0-9]$")
    echo -n "Rootfs partition >>> "
    read disk
done

umount -lf /dev/$disk 2>/dev/null  || true
fs="$(lsblk -no FSTYPE /dev/$disk | tr -d '\n')"

if $(cryptsetup isLuks /dev/$disk); then
    LUKS_NAME="luks-$(date +%d-%m-%y_%H-%M-%S)"
    cryptsetup open /dev/$disk $LUKS_NAME
    disk="/mapper/$LUKS_NAME"
    fs="$(lsblk -no FSTYPE /dev/$disk | tr -d '\n' | head -n 1)"
fi

if [[ $fs == 'LVM2_member' ]]; then
    # detect volume groups
    VG_NAMES=($(vgdisplay --colon | awk -F: '{print $1}' | xargs))
    if [ ${#VG_NAMES[@]} -eq 0 ]; then
      echo "No volume groups found."
      exit 1
    elif [ ${#VG_NAMES[@]} -gt 1 ]; then
      while true; do
        echo "Multiple volume groups found, please select one of:"
        echo ${VG_NAMES[@]}
        read -p "volume group >>> " VG_NAME
        if [[ ${VG_NAMES[@]} =~ $VG_NAME ]]; then
          break
        else
          echo "Invalid input. Please enter a valid number."
        fi
      done
    else
      VG_NAME=${VG_NAMES[0]}
    fi
    vgchange -ay $VG_NAME

    # Find the logical volumes
    LV_NAMES=($(lvdisplay --colon | grep ":$VG_NAME:" | awk -F: '{print $1}'))
    for lv in ${!LV_NAMES[@]}; do
        LV_NAMES[$lv]=$(echo ${LV_NAMES[$lv]} | sed "s/.*\/$VG_NAME\///")
    done
    if [ ${#LV_NAMES[@]} -eq 0 ]; then
      echo "No logical volumes found."
      exit 1
    elif [ ${#LV_NAMES[@]} -gt 1 ]; then
      while true; do
        echo "Multiple logical volumes found, please select one of:"
        echo "${!LV_NAMES[@]}"
        read -p "logical volume >>> " LV_NAME
        if [[ ${!LV_NAMES[@]} =~ $LV_NAME ]]; then
          break
        else
          echo "Invalid input. Please enter a valid number."
        fi
      done
    else
      LV_NAME=${LV_NAMES[0]}
    fi
    # LV_NAME=$(echo $LV_NAME | sed "s/.*\/$VG_NAME\///")
    disk="$VG_NAME/$LV_NAME"
    fs="$(lsblk -no FSTYPE /dev/$disk | tr -d '\n')"
fi

mount /dev/$disk "$DESTDIR"

# btrfs subvolumes
if [[ $fs == 'btrfs' ]]; then
    if [[ $(btrfs subvolume list "$DESTDIR" | wc -l) -eq 0 ]]; then
        echo "No subvolumes found"
    else
        if [ -z ${subvolume+x} ]; then
            while [[ -z ${subvolume+x} ]]; do
                echo $(btrfs subvolume list "$DESTDIR" | awk '{print $9}')
                echo -n "Rootfs Subvolume >>> "
                read subvolume
            done
        fi
        umount "$DESTDIR" -f -l
        mount -o subvol="$subvolume" /dev/$disk "$DESTDIR"
    fi
fi

for path in dev dev/pts proc sys; do
    mount --bind "/$path" "$DESTDIR/$path"
done

# mount other btrfs subvolumes from fstab
while IFS= read -r line; do
    [[ "$line" =~ ^#.*$ ]] && continue
    [[ -z "$line" ]] && continue
    DEVICE=$(echo "$line" | awk '{print $1}')
    MOUNTPOINT=$(echo "$line" | awk '{print $2}')
    FSTYPE=$(echo "$line" | awk '{print $3}')
    OPTIONS=$(echo "$line" | awk '{print $4}')
    [[ -z $OPTIONS || -z $MOUNTPOINT || -z $FSTYPE || -z $DEVICE ]] && continue
    
    if [[ $FSTYPE == 'btrfs' && $MOUNTPOINT != '/' ]]; then
        mount -t "$FSTYPE" -o "$OPTIONS" "$DEVICE" "$DESTDIR/$MOUNTPOINT"
    fi
done < "$DESTDIR/etc/fstab"

cp -L /etc/resolv.conf "$DESTDIR/etc/resolv.conf"

if [ -d "/sys/firmware/efi" ]; then
    mount --bind /sys/firmware/efi/efivars "$DESTDIR/sys/firmware/efi/efivars"
fi
